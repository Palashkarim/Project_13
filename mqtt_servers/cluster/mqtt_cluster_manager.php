#!/usr/bin/env php
<?php
/**
 * mqtt_cluster_manager.php
 * ------------------------------------------------------------
 * Cluster utility for Mosquitto:
 *   php mqtt_cluster_manager.php list
 *   php mqtt_cluster_manager.php add-user u:123 'secret'
 *   php mqtt_cluster_manager.php set-pass u:123 'newsecret'
 *   php mqtt_cluster_manager.php gen-acl [--source=api|local]
 *   php mqtt_cluster_manager.php reload
 *
 * Conventions:
 *  - cluster_config.json describes brokers & file paths
 *  - Passwords hashed via mosquitto_passwd (exec)
 *  - ACLs: prefer API dump; template fallback provided
 */

const CFG = __DIR__ . '/cluster_config.json';
const ACL_TEMPLATE_USER = __DIR__ . '/acl_templates/acl_user_readwrite.tpl';

function diex($msg, $code=1){ fwrite(STDERR, $msg.PHP_EOL); exit($code); }
function loadCfg(){
  if(!file_exists(CFG)) diex("Missing ".CFG);
  $j = json_decode(file_get_contents(CFG), true);
  if(!$j || !isset($j['brokers'])) diex("Invalid cluster_config.json");
  return $j;
}
function sh($cmd){
  exec($cmd.' 2>&1', $out, $rc);
  return ['rc'=>$rc,'out'=>implode("\n",$out)];
}
function mosqPasswdSet($passwdFile, $user, $pass){
  // Ensure passwd file exists (create with -c if not)
  if (!file_exists($passwdFile)) {
    $cmd = sprintf('mosquitto_passwd -c -b %s %s %s', escapeshellarg($passwdFile), escapeshellarg($user), escapeshellarg($pass));
  } else {
    $cmd = sprintf('mosquitto_passwd -b %s %s %s', escapeshellarg($passwdFile), escapeshellarg($user), escapeshellarg($pass));
  }
  $r = sh($cmd);
  if($r['rc']!==0) diex("mosquitto_passwd failed: ".$r['out']);
}

function listBrokers($cfg){
  echo "Brokers:\n";
  foreach($cfg['brokers'] as $b){
    printf("- %s @ %s (tcp:%d ws:%d tls:%d)\n", $b['id'], $b['host'], $b['tcp_port'], $b['ws_port'], $b['tls_port']);
    printf("  conf:%s\n  passwd:%s\n  acl:%s\n", $b['paths']['conf'], $b['paths']['passwd'], $b['paths']['acl']);
  }
}

function getSecretFromCmd($cmd){
  if(!$cmd) return '';
  $r = sh($cmd);
  if($r['rc']!==0) return '';
  return trim($r['out']);
}

function addUserAll($cfg, $user, $pass){
  foreach($cfg['brokers'] as $b){
    echo "[{$b['id']}] adding/updating $user ... ";
    mosqPasswdSet(realpath(__DIR__.'/'.$b['paths']['passwd']), $user, $pass);
    echo "OK\n";
  }
}

function reloadAll($cfg){
  foreach($cfg['brokers'] as $b){
    // Reload by SIGHUP. If you run mosquitto as a service, you can systemctl reload instead.
    echo "[{$b['id']}] reload... ";
    // Try pid file in broker folder; fallback to pidof
    $pidFile = realpath(__DIR__.'/'.$b['paths']['base'].'/mosquitto.pid');
    if ($pidFile && is_file($pidFile)) {
      $pid = trim(@file_get_contents($pidFile));
      if ($pid) {
        posix_kill((int)$pid, SIGHUP);
        echo "HUP pid=$pid\n";
        continue;
      }
    }
    // Fallback
    $r = sh('pidof mosquitto');
    if($r['rc']===0 && trim($r['out'])!==''){
      foreach(preg_split('/\s+/', trim($r['out'])) as $p){
        posix_kill((int)$p, SIGHUP);
      }
      echo "HUP pid(s)=".trim($r['out'])."\n";
    } else {
      echo "WARN: could not find pid; ensure broker running.\n";
    }
  }
}

function fetchAclFromApi($cfg){
  $url = $cfg['api']['acl_dump_url'] ?? '';
  if(!$url) return null;
  $tok = getSecretFromCmd($cfg['api']['bearer_token_cmd'] ?? '');
  $ctx = stream_context_create([
    'http'=>[
      'method'=>'GET',
      'header'=>($tok?'Authorization: Bearer '.$tok."\r\n":'')
    ]
  ]);
  $raw = @file_get_contents($url, false, $ctx);
  if($raw===false) return null;
  $json = json_decode($raw, true);
  return $json ?: null;
}

function renderLocalAcl($users){
  // Minimal header + role blocks + per-user blocks
  $head = <<<ACL
###############################################################################
# AUTO-GENERATED – DO NOT EDIT
# Generated by mqtt_cluster_manager.php on: %s
# Source: local template
###############################################################################

# Admin
user admin:10
topic read  #
topic write #

# Super
user super:1
topic read  #
topic write #

# Technician (wide read)
user tech:100
topic read ten/+/dev/+/state
topic read ten/+/dev/+/tele
topic read ten/+/dev/+/lwt
# topic write ten/+/dev/+/cmd   # (optional)

# Per-tenant/user rules (pattern-based)
pattern write ten/%u/dev/+/cmd
pattern read  ten/%u/dev/+/state
pattern read  ten/%u/dev/+/tele
pattern read  ten/%u/dev/+/lwt

ACL;
  $out = sprintf($head, date('c')).PHP_EOL;

  // If you want explicit user sections (e.g., extra topics), use a template
  $tpl = file_exists(ACL_TEMPLATE_USER) ? file_get_contents(ACL_TEMPLATE_USER) : '';
  foreach($users as $u){
    // $u: ['username'=>'u:123','extra'=>['read'=>['ten/u:123/dev/room1/config'], 'write'=>[]]]
    $section = "\n# --- ".$u['username']." ---\n";
    if ($tpl) {
      $section .= str_replace(
        ['{{username}}','{{tenant}}'],
        [$u['username'], $u['username']],
        $tpl
      );
    }
    // extra explicit topic grants if provided
    if (!empty($u['extra']['read'])) {
      foreach($u['extra']['read'] as $t){ $section .= "topic read ".$t."\n"; }
    }
    if (!empty($u['extra']['write'])) {
      foreach($u['extra']['write'] as $t){ $section .= "topic write ".$t."\n"; }
    }
    $out .= $section;
  }
  return $out;
}

function genAclAll($cfg, $source='api'){
  // 1) Try API (full precomputed ACL text or structured JSON)
  $brokers = $cfg['brokers'];
  $aclText = null;

  if ($source === 'api') {
    $api = fetchAclFromApi($cfg);
    if ($api && isset($api['format']) && $api['format']==='mosquitto' && !empty($api['content'])) {
      $aclText = $api['content'];
      echo "Using ACL from API endpoint.\n";
    } elseif ($api && !empty($api['users'])) {
      // Expect 'users' array → render with local template
      $aclText = renderLocalAcl($api['users']);
      echo "Using ACL users from API → rendered locally.\n";
    } else {
      echo "API not available or invalid. Falling back to local.\n";
    }
  }

  // 2) Fallback to local: build from template with a basic list of users
  if ($aclText === null) {
    // Load users from passwd files (prefix "u:"), merge across brokers
    $usernames = [];
    foreach ($brokers as $b) {
      $passwd = realpath(__DIR__.'/'.$b['paths']['passwd']);
      if (!$passwd || !is_file($passwd)) continue;
      foreach (file($passwd, FILE_IGNORE_NEW_LINES) as $line) {
        if (strpos($line, ':') === false) continue;
        $name = substr($line, 0, strpos($line, ':')); // "u:123"
        if (str_starts_with($name, 'u:')) $usernames[$name] = true;
      }
    }
    $users = [];
    foreach(array_keys($usernames) as $u){
      $users[] = ['username'=>$u, 'extra'=>[]];
    }
    $aclText = renderLocalAcl($users);
  }

  // 3) Write to each broker's acl.conf
  foreach($brokers as $b){
    $aclFile = realpath(__DIR__.'/'.$b['paths']['acl']) ?: __DIR__.'/'.$b['paths']['acl'];
    echo "[{$b['id']}] writing ACL: $aclFile\n";
    file_put_contents($aclFile, $aclText);
  }
}

function usage(){
  echo <<<TXT
Usage:
  php mqtt_cluster_manager.php list
  php mqtt_cluster_manager.php add-user <username> <password>
  php mqtt_cluster_manager.php set-pass  <username> <password>
  php mqtt_cluster_manager.php gen-acl [--source=api|local]
  php mqtt_cluster_manager.php reload

Examples:
  php mqtt_cluster_manager.php list
  php mqtt_cluster_manager.php add-user u:100 "S3cret!"
  php mqtt_cluster_manager.php gen-acl --source=api
  php mqtt_cluster_manager.php reload

TXT;
}

$argv = $_SERVER['argv']; $argc = $_SERVER['argc'];
if ($argc < 2) { usage(); exit(0); }

$cfg = loadCfg();
$cmd = $argv[1];

switch ($cmd) {
  case 'list':
    listBrokers($cfg);
    break;

  case 'add-user':
  case 'set-pass':
    if ($argc < 4) diex("Missing args: $cmd <username> <password>");
    $user = $argv[2];
    $pass = $argv[3];
    addUserAll($cfg, $user, $pass);
    echo "Done.\n";
    break;

  case 'gen-acl':
    $source = 'api';
    foreach($argv as $a){
      if (str_starts_with($a, '--source=')) $source = explode('=',$a,2)[1] ?: 'api';
    }
    genAclAll($cfg, $source);
    echo "ACLs generated.\n";
    break;

  case 'reload':
    reloadAll($cfg);
    echo "Reload signal sent.\n";
    break;

  default:
    usage();
    break;
}

